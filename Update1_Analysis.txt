1. Orders per User
2. Products per User
3. Products per Order
4. Order per day of Week -Normalize percentwise
5. Order per time of day.
6. Days_since prior order days grouping
7. Top 20 Aisles
8. Top 20 Products
9. Top 20 Departments



Observations:
1. There is no user with less than 4 orders.
2.  Orders per User and Products per User have exactly the same graph.
3. Days since prior order where is the value 'NaN' going
4. Days since prior order are there entris with days mor than 30?
5. All Top Products are from Fresh Food/ Fresh veggie Aisle or fresh food Department
6. Vairation of type of product repeating in top 20 products.


Can be Graphs: 
1. Finding k Most similar Items to a product


Things for us to see:

1. product similarity with none: captures if the product is usually present in orders    with no reorder.
2. to capture recency, streak and past order similarity and diversity which helped.
3. How to Group prodocts, since this will come into picture because, there is no subgrouping and many aisles have varied products
4. To Find k most similar Products to a product
   - Depending upon the name
   - By finding similar customers
5. How are grouping users together
   - Similarity in the aisles/products they make purchase
   - Similarity depending upon the time/day of week they order
   - Or Something Else.






Product X Item Features as suggested in Git:

1. Number of orders in which the user purchases the item
2. Days since the user last purchased the item
3. Streak (number of orders in a row the user has purchased the item)
4. Position in the cart
5. Whether the user already ordered the item today
6. Co-occurrence statistics
7. Replacement items

===================================
Next Step: Recommendation Systems
===================================

[Architecture of our Recommendation System] Collaborative Filtering

[Core question] how to identify similar customers or similar products?
Based on Duality of Similarity, it's easier to discover items that are similar than it's to detect that two users are similar, because it is easier to find items of the same genre than it is to find users that like only items of a single genre. To estimate the entry for customer C and product P, find the m products most similar to P, for some m, and take the average number of purchases, among the m products, of the ratings that C has given. (Better to normalize the product purchases first)

[Methods to calculate similarity]
 - Jaccard Distance:
   #Pro: useful when we only care about the products already bought by customers, regardless of detailed purchases.
   #Con: it may lose some important information when more detailed purchases need considering.
 - Cosine Distance

[Auxiliary methods]
 - Rounding the data by eliminating the apparent similarity between products a customer bought frequently and those with low frequency by rounding the purchases
 - Normalizing Purchases by subtracting from each purchase the average purchase of that customer.

[A better method to find similarity among customers/products]
Clustering

Use cluster-cluster utility matrix to estimate entries in the original (customer-product) utility matrix
(a) Find the clusters to which customer C and Product P belong, say clusters A and B, respectively.
(b) If the entry in the cluster-cluster utility matrix for A and B is something other than blank, use this value as the estimated value for the C–P entry in the original utility matrix.(c) If the entry for clusters A–B is blank, then use the method outlined in [Core Question, adapted from Section 9.3.2, LRU Book] to estimate that entry by considering clusters similar to A or B. Use the resulting estimate as the estimate for the C-P entry.
